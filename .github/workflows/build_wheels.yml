name: Build wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: ['3.10', '3.11']

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Initialize submodules
        run: |
          git submodule sync
          git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Install system dependencies for building (not for end users)
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libboost-all-dev libzmq3-dev
          python -m pip install wheel scikit-build cmake ninja setuptools
          python -m pip install cibuildwheel

      # Download and extract static Boost
      - name: Prepare static Boost
        run: |
          mkdir -p /tmp/deps
          cd /tmp/deps
          wget -q https://archives.boost.io/release/1.79.0/source/boost_1_79_0.tar.gz
          tar xf boost_1_79_0.tar.gz
          cd boost_1_79_0
          ./bootstrap.sh --with-libraries=system,filesystem --prefix=/tmp/local
          ./b2 link=static install

      # Download and build static ZeroMQ
      - name: Prepare static ZeroMQ
        run: |
          cd /tmp/deps
          wget -q https://github.com/zeromq/libzmq/releases/download/v4.3.4/zeromq-4.3.4.tar.gz
          tar xf zeromq-4.3.4.tar.gz
          cd zeromq-4.3.4
          ./configure --enable-static --disable-shared --prefix=/tmp/local
          make -j4
          make install

      # Build the wheel using our local static dependencies
      - name: Build wheel
        env:
          CMAKE_PREFIX_PATH: /tmp/local
          BOOST_ROOT: /tmp/local
          ZeroMQ_ROOT: /tmp/local
        run: |
          python -m pip wheel . -w wheelhouse/

      # Use auditwheel to make the wheel compatible with manylinux
      - name: Repair wheel with auditwheel
        run: |
          python -m pip install auditwheel
          auditwheel repair wheelhouse/*.whl -w ./dist/

      # Updated to the latest version
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: ./dist/*.whl
