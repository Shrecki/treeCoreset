name: Build wheels

on:
  push:
    tags:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels (manylinux)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Set up Python (this step is optional; cibuildwheel will use containerized Pythons)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Install cibuildwheel so we can build manylinux wheels
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      # Build wheels using cibuildwheel in a manylinux container.
      # The CIBW_BEFORE_BUILD script runs inside the container and installs pybind11 from the submodule,
      # builds Boost, and builds ZeroMQ, installing them into /tmp/local.
      - name: Build wheels with cibuildwheel
        env:
          CIBW_BEFORE_BUILD: |
            # Remove Python 3.6 if it exists
            yum remove -y python36 python3.6 python36-devel python3.6-devel || true
            
            # Install system dependencies
            yum install -y wget gcc gcc-c++ make python3-devel python3-libs autoconf automake libtool nasm 
            yum install -y pkgconfig
            yum install -y m4

            # Debug: show Python information
            echo "Python executable: $(which python)"
            python --version
            
            # Python path detection
            PYBIN=$(which python)
            PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
            PYTHON_ROOT=$(cd $(dirname $PYBIN)/..; pwd)
            PYTHON_INCLUDE=$PYTHON_ROOT/include/python${PYTHON_VERSION}*
            PYTHON_LIB=$PYTHON_ROOT/lib*/libpython${PYTHON_VERSION}*.so
            
            # Set CMake arguments for Python
            export PATH="$PYTHON_ROOT/bin:$PATH"
            export PYTHON_EXECUTABLE="$PYBIN"
            export CMAKE_ARGS="-DPython_EXECUTABLE=$PYBIN -DPython_ROOT_DIR=$PYTHON_ROOT -DPython_INCLUDE_DIR=$PYTHON_INCLUDE -DPython_LIBRARY=$PYTHON_LIB"
            export PYTHONPATH=$PYTHON_ROOT/lib/python${PYTHON_VERSION}/site-packages
            
            echo "Using Python at: $PYBIN"
            echo "Python version: $PYTHON_VERSION"
            echo "Python root: $PYTHON_ROOT"
            echo "Python include: $PYTHON_INCLUDE"
            echo "Python lib: $PYTHON_LIB"
            
            # Download, build, and install static ZeroMQ
            mkdir -p /tmp/deps
            cd /tmp/deps
            wget https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz
            tar xvf zeromq-4.3.5.tar.gz
            cd zeromq-4.3.5/
            ./configure --prefix=/tmp/local
            make -j4
            make install
            cd ../../
            
            # Verify ZeroMQ was built correctly and installed to the right location
            echo "Checking ZeroMQ installation..."
            ls -la /tmp/local/lib/
            file /tmp/local/lib/libzmq.a || echo "libzmq.a not found"
            
            echo "Installing ZeroMQ C++ bindings..."
            cd /tmp/deps
            git clone https://github.com/zeromq/cppzmq.git
            cd cppzmq
            mkdir build && cd build
            cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/local -DCPPZMQ_BUILD_TESTS=OFF
            make -j4 && make install
            cd ../../
            cd ../../
            
            # Download, build, and install static Boost
            mkdir -p /tmp/deps
            cd /tmp/deps
            wget -q https://archives.boost.io/release/1.79.0/source/boost_1_79_0.tar.gz
            tar xf boost_1_79_0.tar.gz
            cd boost_1_79_0
            ./bootstrap.sh --with-libraries=system,filesystem
            ./b2 link=static install
            cd ..
            cd ../../
            
            
            echo "Installing Pybind11"
            # Build and install pybind11 from the submodule
            cd /project/pybind11
            mkdir -p build && cd build
            cmake .. -DPYBIND11_PYTHON_VERSION=3.10 \
                     -DPython_EXECUTABLE=$PYBIN \
                     -DPython_ROOT_DIR=$PYTHON_ROOT \
                     -DPython_INCLUDE_DIR=$PYTHON_INCLUDE \
                     -DPython_LIBRARY=$PYTHON_LIB
            make && make install
            cd ../../../../
            
            
            # Create symlinks if needed
            ln -sf $PYTHON_LIB $PYTHON_ROOT/lib/$(basename $PYTHON_LIB)

            # Make a simple Python test file to verify we're using the right Python
            echo "import sys; print(f'Building for Python {sys.version}')" > /tmp/test.py
            $PYBIN /tmp/test.py
          # Use a manylinux image with an older toolchain
          CIBW_BASE_IMAGE: quay.io/pypa/manylinux2010_x86_64

          # Pass the dependency install prefix to CMake
          CIBW_ENVIRONMENT: >
            CMAKE_PREFIX_PATH=/tmp/local
            BOOST_ROOT=/tmp/local
            ZeroMQ_ROOT=/tmp/local
            ZeroMQ_DIR=/tmp/local/lib/cmake/ZeroMQ
            CMAKE_ARGS="-DBUNDLE_DEPENDENCIES=ON -DSKBUILD=ON -DPython_FIND_COMPONENTS=Interpreter;Development -DPython_LIBRARIES=$PYTHON_LIB -DPython_LIBRARY=$PYTHON_LIB -DZeroMQ_INCLUDE_DIR=/tmp/local/include -DZeroMQ_LIBRARY=/tmp/local/lib/libzmq.a"
            VERBOSE=1

          # Specify which Python versions to build for
          CIBW_BUILD: "cp310-* cp311-*"

          # Debug build process
          CIBW_BUILD_VERBOSITY: 1

          # Skip tests during wheel building
          CIBW_TEST_SKIP: "*"

        run: python -m cibuildwheel --output-dir wheelhouse

      # Upload the resulting wheels as artifacts
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: wheelhouse/*.whl