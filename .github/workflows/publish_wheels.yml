# .github/workflows/publish_wheels.yml
name: Publish to PyPI

on:
  workflow_run:
    workflows: ["Build wheels"]  # Make sure this matches your build workflow name
    types:
      - completed
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      build_run_id:
        description: 'Build workflow run ID to publish (required for manual trigger)'
        required: false
        type: string
      use_latest_successful:
        description: 'Use latest successful build workflow run'
        required: false
        type: boolean
        default: true

jobs:
  publish:
    name: Publish to PyPI
    # Handle both automatic workflow_run and manual workflow_dispatch
    if: >
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'twine<6.1.0'

      - name: Create dist directory
        run: mkdir -p dist

      # Find the build workflow run ID to use
      - name: Determine workflow run ID
        id: get_run_id
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
            echo "Using triggering workflow run ID: ${{ github.event.workflow_run.id }}"
          elif [[ -n "${{ inputs.build_run_id }}" ]]; then
            echo "run_id=${{ inputs.build_run_id }}" >> $GITHUB_OUTPUT
            echo "Using manually specified run ID: ${{ inputs.build_run_id }}"
          elif [[ "${{ inputs.use_latest_successful }}" == "true" ]]; then
            # Get the latest successful run of the build workflow
            echo "Finding latest successful build workflow run..."
          
            # Install GitHub CLI
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          
            # Authenticate with GitHub token
            echo "${{ github.token }}" | gh auth login --with-token
          
            # Get the latest successful run ID
            LATEST_RUN_ID=$(gh run list --workflow build_wheels.yml --status completed --json databaseId,conclusion --jq '.[] | select(.conclusion=="success") | .databaseId' | head -n 1)
          
            if [[ -n "$LATEST_RUN_ID" ]]; then
              echo "run_id=$LATEST_RUN_ID" >> $GITHUB_OUTPUT
              echo "Using latest successful build run ID: $LATEST_RUN_ID"
            else
              echo "No successful build workflow runs found!"
              exit 1
            fi
          else
            echo "Error: No run ID specified and not using latest successful run."
            exit 1
          fi

      # Download the artifact from the build workflow
      - name: Download wheel artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build_wheels.yml  # Name of your build workflow file
          run_id: ${{ steps.get_run_id.outputs.run_id }}  # Use the determined run ID
          name: wheels  # Matches the name in your upload-artifact step
          path: dist/

      # Filter to keep only manylinux wheels
      - name: Filter manylinux wheels
        run: |
          mkdir -p dist_filtered
          find dist -name "*manylinux*.whl" -exec cp {} dist_filtered/ \;
          echo "Available wheels for publishing:"
          ls -la dist_filtered/

      - name: Check distributions
        run: |
          twine check dist_filtered/*.whl

      # First deploy to TestPyPI
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/simple/
          packages-dir: dist_filtered/

      # If TestPyPI deployment succeeds, deploy to PyPI
      #- name: Publish to PyPI
      #  uses: pypa/gh-action-pypi-publish@release/v1
      # with:
      #    user: __token__
      #    password: ${{ secrets.PYPI_API_TOKEN }}
      #    packages-dir: dist_filtered/